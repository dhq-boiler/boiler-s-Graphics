# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  disable.coverage.autogenerate: 'true'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: CmdLine@2
  displayName: "NUnit & OpenCover"
  inputs:
    script: >
      packages\OpenCover.4.7.1221\tools\OpenCover.Console.exe
      -register:Path64
      -target:"packages\NUnit.ConsoleRunner.3.12.0\tools\nunit3-console.exe"
      -targetargs:"boilersGraphics.Test.dll"
      -targetdir:"boilersGraphics.Test\bin\$(buildConfiguration)"
      -returntargetcode
      -output:"coverage.xml"
      -filter:"+[boilersGraphics]* +[TsOperationHistory]* -[*]XamlGeneratedNamespace*"

- task: PublishTestResults@2
  displayName: "Publish unit test result"
  condition: always()
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: '**/TestResult.xml'
    failTaskOnFailedTests: false

- task: reportgenerator@4
  condition: always()
  inputs:
    reports: '**\coverage.xml'
    targetdir: 'coveragereport'

- task: PublishCodeCoverageResults@1
  condition: always()
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: 'coveragereport\Cobertura.xml'
    reportDirectory: 'coveragereport\'

# Archive files
# Compress files into .7z, .tar.gz, or .zip
- task: ArchiveFiles@2
  condition: always()
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)\boilersGraphics\bin\Release' 
    includeRootFolder: false
    archiveType: 'zip' # Options: zip, 7z, tar, wim
    tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
    archiveFile: '$(Build.ArtifactStagingDirectory)/boilersGraphics_$(Build.BuildId).zip' 
    replaceExistingArchive: true 
    #verbose: # Optional
    #quiet: # Optional

# GitHub Release
# Create, edit, or delete a GitHub release
- task: GitHubRelease@0
  condition: always()
  inputs:
    gitHubConnection: dhq-boiler-azure-devops
    repositoryName: '$(Build.Repository.Name)' 
    action: 'create' # Options: create, edit, delete
    target: '$(Build.SourceVersion)' # Required when action == Create || Action == Edit
    tagSource: 'auto' # Required when action == Create# Options: auto, manual
    #tagPattern: # Optional
    #tag: # Required when action == Edit || Action == Delete || TagSource == Manual
    #title: # Optional
    #releaseNotesSource: 'file' # Optional. Options: file, input
    #releaseNotesFile: # Optional
    #releaseNotes: # Optional
    assets: '$(Build.ArtifactStagingDirectory)\boilersGraphics_$(Build.BuildId).zip'
    assetUploadMode: 'delete' # Optional. Options: delete, replace
    isDraft: false # Optional
    isPreRelease: false # Optional
    addChangeLog: true # Optional
    compareWith: 'lastFullRelease' # Required when addChangeLog == True. Options: lastFullRelease, lastRelease, lastReleaseByTag
    #releaseTag: # Required when compareWith == LastReleaseByTag

- script: VERSION_TAG=`git describe --tags` && echo "##vso[task.setvariable variable=VERSION_TAG]$VERSION_TAG"
      displayName: Set the tag name as an environment variable

- task: CmdLine@2
  displayName: "pip install python-oauth2"
  inputs:
    script: >
      pip install twitter

# Python script
# Run a Python file or inline script
- task: PythonScript@0
  inputs:
    scriptSource: 'inline' # Options: filePath, inline
    #scriptPath: azure_devops/python_script/tweet.py # Required when scriptSource == filePath
    script: >
        from twitter import Twitter, OAuth

        access_token = '$(AccessToken)'

        access_token_secret = '$(AccessTokenSecret)'

        api_key = '$(APIKey)'

        api_secret = '$(APIKeySecret)'
        
        t = Twitter(auth = OAuth(access_token, access_token_secret, api_key, api_secret))

        text = 'https://github.com/dhq-boiler/boiler-s-Graphics/releases/tag/$(VERSION_TAG)'

        statusUpdate = t.statuses.update(status=text)
    #arguments: # Optional
    #pythonInterpreter: # Optional
    #workingDirectory: # Optional
    #failOnStderr: false # Optional