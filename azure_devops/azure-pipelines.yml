# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-2022'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  disable.coverage.autogenerate: 'true'
  System.Debug: True
  TargetSolution: '$(Build.SourcesDirectory)\boilersGraphics.sln'
  TestProjects: '$(Build.SourcesDirectory)\boilersGraphics.Test\*.Test.csproj'

steps:
- task: NuGetToolInstaller@1

- task: DotNetCoreCLI@2
  displayName: 'NuGet パッケージの復元'
  inputs:
    command: 'restore'
    projects: '$(TargetSolution)'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  displayName: 'アプリケーションのビルド'
  inputs:
    command: 'build'
    projects: '$(TargetSolution)'
    arguments: '--configuration $(BuildConfiguration)'  

- task: MsixPackaging@1
  inputs:
    outputPath: '$(Build.ArtifactStagingDirectory)\boilersGraphics.msix'
    solution: 'boilersGraphics.sln'
    clean: true
    generateBundle: false
    buildConfiguration: 'release'
    buildPlatform: 'Any CPU'
    updateAppVersion: false
    appPackageDistributionMode: 'StoreAndSideload'
    msbuildLocationMethod: 'version'
    msbuildVersion: 'latest'
    msbuildArchitecture: 'x64'

- task: Windows Application Driver@0
  inputs:
    OperationType: 'Start'
    AgentResolution: '1080p'

- task: CmdLine@2
  displayName: '単体テストの実行'
  inputs:
    script: 'dotnet test --configuration $(BuildConfiguration) --collect "XPlat Code coverage" -- RunConfiguration.DisableAppDomain=true'

- task: Windows Application Driver@0
  condition: always()
  inputs:
    OperationType: 'Stop'

- task: reportgenerator@4
  displayName: 'コードカバレッジレポートの作成'
  inputs:
    reports: '$(System.DefaultWorkingDirectory)\boilersGraphics.Test\TestResults\**\coverage.cobertura.xml'
    targetdir: '$(System.DefaultWorkingDirectory)\TestResults\Coverage\Reports'
    reporttypes: 'Cobertura'

- task: PublishCodeCoverageResults@1
  displayName: 'コードカバレッジレポートの発行'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)\TestResults\Coverage\Reports\Cobertura.xml'

# Archive files
# Compress files into .7z, .tar.gz, or .zip
- task: ArchiveFiles@2
  condition: always()
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)\boilersGraphics\bin\Release\net6.0-windows' 
    includeRootFolder: false
    archiveType: 'zip' # Options: zip, 7z, tar, wim
    tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
    archiveFile: '$(Build.ArtifactStagingDirectory)/boilersGraphics_$(Build.BuildId).zip' 
    replaceExistingArchive: true 
    #verbose: # Optional
    #quiet: # Optional

# GitHub Release
# Create, edit, or delete a GitHub release
- task: GitHubRelease@0
  condition: always()
  inputs:
    gitHubConnection: dhq-boiler-azure-devops
    repositoryName: '$(Build.Repository.Name)' 
    action: 'create' # Options: create, edit, delete
    target: '$(Build.SourceVersion)' # Required when action == Create || Action == Edit
    tagSource: 'auto' # Required when action == Create# Options: auto, manual
    #tagPattern: # Optional
    #tag: # Required when action == Edit || Action == Delete || TagSource == Manual
    #title: # Optional
    #releaseNotesSource: 'file' # Optional. Options: file, input
    #releaseNotesFile: # Optional
    #releaseNotes: # Optional
    assets: '$(Build.ArtifactStagingDirectory)\boilersGraphics_$(Build.BuildId).zip'
    assetUploadMode: 'delete' # Optional. Options: delete, replace
    isDraft: false # Optional
    isPreRelease: false # Optional
    addChangeLog: true # Optional
    compareWith: 'lastFullRelease' # Required when addChangeLog == True. Options: lastFullRelease, lastRelease, lastReleaseByTag
    #releaseTag: # Required when compareWith == LastReleaseByTag

- powershell: |
   $CI_BUILD_TAG = git describe --tags
   Write-Host "##vso[task.setvariable variable=CI_BUILD_TAG]$CI_BUILD_TAG"
  displayName: 'Set the tag name as an environment variable'

- task: CmdLine@2
  displayName: "pip install python-oauth2"
  inputs:
    script: >
      pip install twitter

# Python script
# Run a Python file or inline script
- task: PythonScript@0
  inputs:
    scriptSource: 'inline' # Options: filePath, inline
    #scriptPath: azure_devops/python_script/tweet.py # Required when scriptSource == filePath
    script: >
        from twitter import Twitter, OAuth

        access_token = '$(AccessToken)'

        access_token_secret = '$(AccessTokenSecret)'

        api_key = '$(APIKey)'

        api_secret = '$(APIKeySecret)'
        
        t = Twitter(auth = OAuth(access_token, access_token_secret, api_key, api_secret))

        text = 'https://github.com/dhq-boiler/boiler-s-Graphics/releases/tag/$(CI_BUILD_TAG)'

        statusUpdate = t.statuses.update(status=text)
    #arguments: # Optional
    #pythonInterpreter: # Optional
    #workingDirectory: # Optional
    #failOnStderr: false # Optional